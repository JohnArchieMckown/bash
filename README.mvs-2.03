bash 2.03 *beta* for os/390  --  Install instructions:

You will need the gzip/gunzip and bison ports, available at
  http://www.mks.com/s390/gnu/index.htm

$ gunzip bash-2.03-mvs.tar.gz
$ pax -o from=ISO8859-1,to=IBM-1047 -rf bash-2.03-mvs.tar
$ cd bash-2.03-mvs
$ ln -s /usr/include/stdlib.h ./alloca.h
$ export _CC_INCDIRS="/usr/include $PWD"
$ ./configure
creating cache ./config.cache
checking host system type... i370-ibm-mvs
Beginning configuration for bash-2.03 for i370-ibm-mvs
[snip]
$ ln -s /bin/touch ./size
$ export PATH=$PATH:$PWD
$ make
[snip]
$ ./bash
bash-2.03$ 




Testing notes ---


(1) The following tests now complete without any complaint:
 
   run-arith      run-array2     run-braces     run-cond
   run-cprint     run-dollars    run-extglob    run-func
   run-getopts    run-glob-test  run-heredoc    run-histexpand
   run-history    run-ifs-tests  run-input-test run-jobs
   run-more-exp   run-posix2     run-precedence run-printf
   run-quote      run-rhs-exp    run-rsh        run-set-e
   run-shopt      run-strip      run-test       run-tilde
   run-type
 
(2) The following tests completed successfully, but had differences
due to a message number being inserted into the expected error
text (eg 'EDC5129I No such file or directory.' instead of
'No such file or directory'):
 
   run-builtins   run-dirstack   run-errors     run-redir
 
(3) The following tests did not produce the expected output because
of ascii dependencies built into the test.  For example,
   set $'\1' $'\2' $'\177'
   recho $*
produces `^A^B^?' on linux but produces `^A^B"' on os/390. In
ascii, \177 is the DEL char but in ebcdic it is ".
   set $'\1' $'\2' $'\007'
   recho $*
where \007 is the ebcdic DEL char produces the expected result.
 
   run-new-exp    run-nquote     run-read
 
(4) The following tests produced differing output apparently due to
how variable names are hashed; ascii variable names produce different
hash indices than ebcdic variable names.  For example,
   declare -a a
   declare -a A
   declare -a
displays 'a' before 'A' on ebcdic but displays 'A' before 'a' on ascii.
Whether this should be considered broken is a philosophical question.
 
   run-array      run-varenv
 
(5) The following test, run-trap, may have run successfully... the
test script says:
   warning: UNIX versions number signals differently.  If output differing
   warning: only in line numbers is produced, please do not consider this
   warning: a test failure.
and the test output was:
 
   run-trap
      4a5
      > trap -- 'echo aborting' SIGQUIT
      6d6
      < trap -- 'echo aborting' SIGURG
      12a13
      > trap -- 'echo aborting' SIGQUIT
      14d14
      < trap -- 'echo aborting' SIGURG
      23a24
      > trap -- 'echo aborting' SIGQUIT
      25d25
      < trap -- 'echo aborting' SIGURG
      31a32
      > trap -- 'echo aborting' SIGQUIT
      33d33
      < trap -- 'echo aborting' SIGURG
      38a39
      > trap -- 'echo aborting' SIGQUIT
      40d40
      < trap -- 'echo aborting' SIGURG
      43a44
      > trap -- 'echo aborting' SIGQUIT
      45d45
      < trap -- 'echo aborting' SIGURG
      53,54d52
      < trap -- 'echo aborting' SIGURG
      < trap -- '' SIGUSR2
      55a54
      > trap -- '' SIGUSR2
 
(6) The following tests look like they have some problems that need
to be looked into ('<' is generated by the mvs port and '>'
is what the test expected):
 
   run-exp-tests
      42,43c42,45
      < argv[1] = <a b>
      < argv[1] = <^A ^B>
      ---
      > argv[1] = <a>
      > argv[2] = <b>
      > argv[1] = <^A>
      > argv[2] = <^B>
 
   run-posixpat
      18c18
      < oops -- print
      ---
      > ok 18
      39a40
      > ok 1
 
   run-errors
      [snip]
      < /: xmalloc: cannot allocate 0 bytes (0 bytes allocated)
      < 2
      ---
      > /: /: cannot execute binary file
      > 126
      [snip]
